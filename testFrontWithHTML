<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <script src="index.js"></script>
</head>
</head>
<body>
    <div class="container mt-5">
        <h1>User Manager</h1>
        <table id="userTable" class="table table-dark table-striped col-10">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Age</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                
            </tbody>
        </table>

        <div class="row justify-content-center">
            <div class="col-md-4 d-flex flex-column">
              <textarea id="retorno" class="form-control flex-grow-1"></textarea>
            </div>  
            <div class="col-md-4 d-flex flex-column">
              <button id="btnGdias" class="btn btn-primary flex-grow-1" onclick="getAllUsers()">Get all users</button>
            </div>  
            <div class="col-md-4 d-flex flex-column">
              <button id="btnSelectOne" class="btn btn-secondary flex-grow-1" onclick="getOneUser(1)">Get one user</button>
            </div>  
          </div>
        </div>

        
    </div>
</body>
</html>


body {
    background-color: #f0f0f0; /* Light grey background color */
    background: linear-gradient(135deg, #f0f0f0 25%, #d9d9d9 25%, #d9d9d9 50%, #f0f0f0 50%, #f0f0f0 75%, #d9d9d9 75%, #d9d9d9 100%);
    background-size: 56.57px 56.57px; /* Size of the pattern */
  }


document.addEventListener('DOMContentLoaded', () => {
    fetchUsers();
});

function fetchUsers() {
    fetch('https://localhost:7112/api/Users')
        .then(response => response.json())
        .then(users => {
            const userTable = document.getElementById('userTable').getElementsByTagName('tbody')[0];
            users.forEach(user => {
                const row = userTable.insertRow();
                row.insertCell(0).textContent = user.id;
                row.insertCell(1).textContent = user.name;
                row.insertCell(2).textContent = user.email;
                row.insertCell(3).textContent = user.age;
                const actionsCell = row.insertCell(4);
                actionsCell.innerHTML = `<button onclick="editUser(${user.id})" class="btn btn-outline-warning">Edit</button>
                <button onclick="deleteUser(${user.id})" class="btn btn-outline-danger">Delete</button>`;
            });
        })
        .catch(error => console.error('Error fetching users:', error));
}

function editUser(userId) {
    // Implement edit functionality
    console.log('Edit user:', userId);
}


function getAllUsers(){
    const response = fetch("https://localhost:7112/api/Users");
    response
        .then(x => x.json())
        .then(lista => {
            lista.forEach(usuario => {
                retorno.textContent += ` ${usuario.email}`
            })
        })
}

async function getOneUser(idUser) {
    try {
        const response = await fetch("https://localhost:7112/api/Users/" + idUser);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const user = await response.json();
        console.log(user);
        // Aqui você pode manipular os dados do usuário como desejar
        // Por exemplo, exibir o nome do usuário em um elemento HTML
        document.getElementById('retorno').textContent = user.name;
    } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
    }
}




async function updateUser(idUser, updatedData) {
    try {
        const response = await fetch("https://localhost:7112/api/Users/" + idUser, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedData)
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const updatedUser = await response.json();
        console.log(updatedUser);
        // Aqui você pode manipular os dados do usuário atualizado como desejar
        // Por exemplo, exibir uma mensagem de sucesso
        document.getElementById('retorno').textContent = `Usuário atualizado: ${updatedUser.name}`;
    } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
    }
}

async function createUser(newUser) {
    try {
        const response = await fetch("https://localhost:7112/api/Users", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newUser)
        });
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const createdUser = await response.json();
        console.log(createdUser);
        // Aqui você pode manipular os dados do usuário criado como desejar
        // Por exemplo, exibir uma mensagem de sucesso
        document.getElementById('retorno').textContent = `Usuário criado: ${createdUser.name}`;
    } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
    }
}





const updatedData = {
    name: 'Novo Nome',
    email: 'novoemail@example.com'
    // Adicione outros campos que deseja atualizar
};

updateUser(1, updatedData);
